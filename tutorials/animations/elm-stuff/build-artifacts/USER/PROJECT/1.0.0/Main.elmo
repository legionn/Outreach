Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm);
   var hand = F3(function (clr,
   len,
   time) {
      return function () {
         var angle = $Basics.degrees(90 - 6 * $Time.inSeconds(time));
         return $Graphics$Collage.traced($Graphics$Collage.solid(clr))(A2($Graphics$Collage.segment,
         {ctor: "_Tuple2",_0: 0,_1: 0},
         $Basics.fromPolar({ctor: "_Tuple2"
                           ,_0: len
                           ,_1: angle})));
      }();
   });
   var clock = function (t) {
      return A3($Graphics$Collage.collage,
      400,
      400,
      _L.fromArray([A2($Graphics$Collage.filled,
                   $Color.lightGrey,
                   A2($Graphics$Collage.ngon,
                   12,
                   110))
                   ,A2($Graphics$Collage.outlined,
                   $Graphics$Collage.solid($Color.grey),
                   A2($Graphics$Collage.ngon,
                   12,
                   110))
                   ,A3(hand,$Color.orange,100,t)
                   ,A3(hand,
                   $Color.charcoal,
                   100,
                   t / 60)
                   ,A3(hand,
                   $Color.charcoal,
                   60,
                   t / 720)]));
   };
   var main = A2($Signal.map,
   clock,
   $Time.every($Time.second));
   _elm.Main.values = {_op: _op
                      ,main: main
                      ,clock: clock
                      ,hand: hand};
   return _elm.Main.values;
};